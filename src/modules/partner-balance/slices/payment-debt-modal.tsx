'use client';
import { useDisclosure } from '@hooks/useDisclosure';
import { Button } from '@ui/button';
import { Modal } from '@ui/modal';
import Image from 'next/image';

import CheckTransactionImage from '@assets/img/check-tr.png';
import PaymentDebtImage from '@assets/img/debt-table.png';
import HowToPayDebtImage from '@assets/img/how-debt.png';
import GamlerTransactionModalImage from '@assets/img/modal-tr.png';
import TelegramConfirmTransactionImage from '@assets/img/tg-confirm-tr.png';
import HelperIcon from '@assets/svg/helper-symbol.svg';

const debtInstructions = [
  {
    title: 'üîΩ –í –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–µ—Ä–µ—á–Ω–µ–º –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å —Å—É–º–º—É, –¥–∞—Ç—É –∫–∞–∂–¥–æ–π.',
    images: [PaymentDebtImage.src],
  },
  {
    title: '–î–ª—è –ø–æ–≥–∞—à–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚Äú–ü–æ–≥–∞—Å–∏—Ç—å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å‚Äù',
    images: [HowToPayDebtImage.src],
  },
  {
    title: '–í –≤–∞—à Telegram-–∫–æ—à–µ–ª—ë–∫ –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
    description: ['–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–∞ —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.'],
    images: [TelegramConfirmTransactionImage.src, GamlerTransactionModalImage.src],
  },
  {
    title: '–ù–∞–∂–º–∏—Ç–µ ‚Äú–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å‚Äù —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é',
    description: [
      '–ù–∞ —Å–∞–π—Ç–µ Gamler –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ‚Äú–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞‚Äù –ø–æ—è–≤–∏—Ç—Å—è –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø—Ä–æ—Å—å–±–æ–π –Ω–µ –ø–æ–∫–∏–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É (–∏ –Ω–µ –æ–±–Ω–æ–≤–ª—è—Ç—å –µ–µ), –ø–æ–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.',
      '–î–æ–∂–¥–∏—Ç–µ—Å—å, –ø–æ–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–∫—Ä–æ–µ—Ç—Å—è. –ö–æ–≥–¥–∞ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–∫—Ä–æ–µ—Ç—Å—è - –ø–æ–≥–∞—à–µ–Ω–∏–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ.',
    ],
  },
  {
    title: '–ï—Å–ª–∏ –≤—ã —Å–ª—É—á–∞–π–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ —Å–∞–π—Ç, –æ–±–Ω–æ–≤–∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã–ª–æ—Å—å, –Ω–æ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ –∏—Å—á–µ–∑–ª–∞:',
    list: [
      '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É ¬´–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏¬ª.',
      '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å¬ª —Ä—è–¥–æ–º —Å –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π.',
      '–û—Ç–∫—Ä–æ–µ—Ç—Å—è –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ ‚Äî –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –µ–≥–æ –∏ –Ω–µ –ø–æ–∫–∏–¥–∞–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –ø–æ–∫–∞ –∏–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞.',
      '–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ‚Äî –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –∏—Å—á–µ–∑–Ω–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.',
    ],
    images: [CheckTransactionImage.src],
  },
];

export const PaymentDebtModal = () => {
  const { isOpen, onOpen, onOpenChange, onClose } = useDisclosure();
  return (
    <Modal isOpen={isOpen} onOpenChange={onOpenChange}>
      <Modal.Trigger onClick={onOpen} className='cursor-pointer bg-transparent'>
        <HelperIcon />
      </Modal.Trigger>
      <Modal.Content size='xl'>
        <Modal.Header />
        <Modal.Body className='flex flex-col gap-3 border-t border-b border-black/10 pt-[22px] pb-[17px]'>
          <div className='flex flex-col gap-3 text-black/85'>
            {debtInstructions.map((item, index) => (
              <div key={index} className='flex flex-col gap-1'>
                <h2 className='text-base leading-6 font-bold'>{item.title}</h2>
                {item.description &&
                  item.description.map((text, i) => (
                    <p key={i} className='text-sm leading-[22px]'>
                      {text}
                    </p>
                  ))}
                {item.list && (
                  <ul className='list-inside list-disc'>
                    {item.list.map((listItem, i) => (
                      <li key={i}>{listItem}</li>
                    ))}
                  </ul>
                )}
                {item.images && (
                  <div className={item.images.length > 1 ? 'flex w-full flex-row gap-3 overflow-x-auto' : ''}>
                    {item.images.map((image, i) => (
                      <Image key={i} src={image} alt={image} width={3840} height={2160} className='h-fit w-fit' />
                    ))}
                  </div>
                )}
              </div>
            ))}
          </div>
        </Modal.Body>
        <Modal.Footer className='flex h-full items-center justify-end sm:h-8'>
          <Button onClick={onClose} className='w-full font-normal sm:w-fit' intent='outline'>
            –ü–æ–Ω—è—Ç–Ω–æ
          </Button>
        </Modal.Footer>
      </Modal.Content>
    </Modal>
  );
};
